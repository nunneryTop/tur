--- a/src/os_posix/os_dll.c
+++ b/src/os_posix/os_dll.c
@@ -17,6 +17,11 @@
 
 #include "../mongocrypt-dll-private.h"
 
+#ifdef __ANDROID__
+
+#include "./os_dll_android.c"
+
+#else // __ANDROID__
 #ifndef _WIN32
 
 #include <assert.h>
@@ -130,3 +135,5 @@
 #error "Don't know how to do mcr_dll_path() on this platform"
 
 #endif
+
+#endif // __ANDROID__
--- /dev/null
+++ b/src/os_posix/os_dll_android.c
@@ -0,0 +1,155 @@
+#ifdef __ANDROID__
+#include "../mongocrypt-dll-private.h"
+
+#include <assert.h>
+#include <dlfcn.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <linux/limits.h>
+
+#define LINE_MAX (PATH_MAX + 100 + 100)
+
+typedef struct android_handle {
+   void *handle_;
+   char *filepath;
+} android_handle;
+
+static void *
+open_android_handle (const char *file_, int mode)
+{
+   void *handle = dlopen (file_, mode);
+   if (handle == NULL) {
+      return NULL;
+   }
+   struct android_handle *result = calloc (1, sizeof (android_handle));
+   result->handle_ = handle;
+   // Get the absolute path from /proc/self/maps
+   FILE *file = fopen ("/proc/self/maps", "r");
+   char tmp_path[PATH_MAX + 1], line[LINE_MAX];
+   while (!feof (file)) {
+      if (fgets (line, LINE_MAX, file) == NULL) {
+         break;
+      }
+      int i = 0;
+      // clang-format off
+      // Line is like
+      // address                   perms offset   dev   inode pathname
+      // 7fe0c3e9f000-7fe0c3f93000 r-xp  00000000 08:30 4405  /system/lib64/libc++.so
+      // clang-format on
+      // We just want to get the pathname.
+      // Ignore the address.
+      while (line[i] != '\t' && line[i] != ' ')
+         ++i;
+      while (line[i] == '\t' || line[i] == ' ')
+         ++i;
+      // Ignore the perms.
+      while (line[i] != '\t' && line[i] != ' ')
+         ++i;
+      while (line[i] == '\t' || line[i] == ' ')
+         ++i;
+      // Ignore the offset.
+      while (line[i] != '\t' && line[i] != ' ')
+         ++i;
+      while (line[i] == '\t' || line[i] == ' ')
+         ++i;
+      // Ignore the dev.
+      while (line[i] != '\t' && line[i] != ' ')
+         ++i;
+      while (line[i] == '\t' || line[i] == ' ')
+         ++i;
+      // Ignore the inode.
+      while (line[i] != '\t' && line[i] != ' ')
+         ++i;
+      while (line[i] == '\t' || line[i] == ' ')
+         ++i;
+      // Finally we get the pathname, but it may be the end of this line.
+      if (line[i] == '\n')
+         continue;
+      strcpy (tmp_path, line + i);
+      int tmp_path_len = strlen (tmp_path);
+      // Replace the end of this string with '\0'
+      if (tmp_path[tmp_path_len - 1] == '\n') {
+         tmp_path[tmp_path_len - 1] = '\0';
+      }
+      // Try to dlopen this file and check if it is the same as the opened one
+      void *tmp_handle = dlopen (tmp_path, RTLD_LAZY | RTLD_LOCAL);
+      // Not an ELF file
+      if (tmp_handle == NULL)
+         continue;
+      // Not the same ELF file
+      else if (tmp_handle != handle) {
+         dlclose (tmp_handle);
+         continue;
+      }
+      // We now get the absolute path
+      dlclose (tmp_handle);
+      fclose (file);
+      result->filepath = strdup (tmp_path);
+      return result;
+   }
+   // Cannot get the absolute path, so just return the non-absolute one.
+   fclose (file);
+   result->filepath = strdup (file_);
+   return result;
+}
+
+static void
+close_android_handle (void *android_handle)
+{
+   struct android_handle *handle = android_handle;
+   if (handle->handle_) {
+      dlclose (handle->handle_);
+   }
+   if (handle->filepath) {
+      free (handle->filepath);
+   }
+   free (android_handle);
+}
+
+mcr_dll
+mcr_dll_open (const char *filepath)
+{
+   void *handle = open_android_handle (filepath, RTLD_LAZY | RTLD_LOCAL);
+   if (handle == NULL) {
+      // Failed to open. Return NULL and copy the error message
+      return (mcr_dll){
+         ._native_handle = NULL,
+         .error_string = mstr_copy_cstr (dlerror ()),
+      };
+   } else {
+      // Okay
+      return (mcr_dll){
+         ._native_handle = handle,
+         .error_string = MSTR_NULL,
+      };
+   }
+}
+
+void
+mcr_dll_close_handle (mcr_dll dll)
+{
+   if (dll._native_handle) {
+      close_android_handle (dll._native_handle);
+   }
+}
+
+void *
+mcr_dll_sym (mcr_dll dll, const char *sym)
+{
+   return dlsym (((struct android_handle *) dll._native_handle)->handle_, sym);
+}
+
+mcr_dll_path_result
+mcr_dll_path (mcr_dll dll)
+{
+   struct android_handle *handle = dll._native_handle;
+   if (handle->filepath) {
+      return (mcr_dll_path_result){.path = mstr_copy_cstr (handle->filepath)};
+   } else {
+      // This actually will not happen.
+      return (mcr_dll_path_result){.error_string =
+                                      mstr_copy_cstr ("Handle not found")};
+   }
+}
+#endif // __ANDROID__
